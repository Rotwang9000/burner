/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ElasticTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCKS_BETWEEN_TRADES"
      | "BUY_TAX"
      | "CURVE_DENOMINATOR"
      | "MAX_OPERATORS"
      | "MAX_PRICE_IMPACT"
      | "MAX_RESERVE_RATIO"
      | "MAX_SUPPLY"
      | "MIN_PRICE_ANSWERS"
      | "MIN_PRICE_CHANGE_INTERVAL"
      | "MIN_PRICE_UPDATE_TIME"
      | "MIN_SUPPLY"
      | "PRICE_DECIMALS"
      | "PRICE_FRESHNESS_PERIOD"
      | "SELL_TAX"
      | "TAX_DENOMINATOR"
      | "TRACKED_DECIMALS"
      | "VERSION"
      | "WEBSITE"
      | "WITHDRAWAL_DELAY"
      | "addOperator"
      | "addSymbol"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnCurveRate"
      | "buyTokensByIndex"
      | "closeLongPosition"
      | "collectedTaxes"
      | "completeWithdrawal"
      | "deactivateSymbol"
      | "decimals"
      | "description"
      | "emergencyShutdown"
      | "getPositionInfo"
      | "getSupportedSymbolsCount"
      | "getSymbolHash"
      | "getSymbolInfo"
      | "getSymbolPriceByIndex"
      | "getSymbolStats"
      | "getSystemInfo"
      | "idBySymbol"
      | "initiateWithdrawal"
      | "lastTradeBlock"
      | "longPositions"
      | "mintCurveRate"
      | "name"
      | "nextWithdrawalId"
      | "openLongPositionByIndex"
      | "operatorCount"
      | "operators"
      | "owner"
      | "pendingWithdrawals"
      | "rebaseFactor"
      | "rebaseSupply"
      | "removeOperator"
      | "sellTokensByIndex"
      | "supportedSymbols"
      | "symbol"
      | "symbolById"
      | "symbolData"
      | "symbolStats"
      | "totalStaked"
      | "totalSupplyBySymbol"
      | "trackedSymbol"
      | "tradesPerHour"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdrawTaxes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "EmergencyShutdown"
      | "HolderAdded"
      | "HolderRemoved"
      | "LongPositionClosed"
      | "LongPositionOpened"
      | "OperatorAdded"
      | "OperatorRemoved"
      | "PriceTracked"
      | "PriceUpdateRejected"
      | "Rebase"
      | "SymbolAdded"
      | "SymbolDeactivated"
      | "TaxCollected"
      | "TradeExecuted"
      | "Transfer"
      | "VirtualPairCreated"
      | "WithdrawalInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCKS_BETWEEN_TRADES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BUY_TAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CURVE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OPERATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_IMPACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RESERVE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_ANSWERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_CHANGE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_UPDATE_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_FRESHNESS_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SELL_TAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TAX_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRACKED_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WEBSITE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSymbol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnCurveRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokensByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLongPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectedTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateSymbol",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedSymbolsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolPriceByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idBySymbol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTradeBlock",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "longPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCurveRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLongPositionByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebaseFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebaseSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokensByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedSymbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "symbolById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolStats",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyBySymbol",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trackedSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradesPerHour",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTaxes",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_BETWEEN_TRADES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BUY_TAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURVE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OPERATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_IMPACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RESERVE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_ANSWERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_CHANGE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_UPDATE_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_FRESHNESS_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SELL_TAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TAX_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRACKED_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEBSITE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnCurveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokensByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLongPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedSymbolsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolPriceByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idBySymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTradeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "longPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCurveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLongPositionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebaseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebaseSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokensByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbolById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbolData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "symbolStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackedSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradesPerHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTaxes",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyShutdownEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderAddedEvent {
  export type InputTuple = [symbol: string, holder: AddressLike];
  export type OutputTuple = [symbol: string, holder: string];
  export interface OutputObject {
    symbol: string;
    holder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderRemovedEvent {
  export type InputTuple = [symbol: string, holder: AddressLike];
  export type OutputTuple = [symbol: string, holder: string];
  export interface OutputObject {
    symbol: string;
    holder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LongPositionClosedEvent {
  export type InputTuple = [staker: AddressLike, profit: BigNumberish];
  export type OutputTuple = [staker: string, profit: bigint];
  export interface OutputObject {
    staker: string;
    profit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LongPositionOpenedEvent {
  export type InputTuple = [
    staker: AddressLike,
    ethAmount: BigNumberish,
    entryPrice: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    ethAmount: bigint,
    entryPrice: bigint
  ];
  export interface OutputObject {
    staker: string;
    ethAmount: bigint;
    entryPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorAddedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRemovedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceTrackedEvent {
  export type InputTuple = [
    id: BigNumberish,
    symbol: string,
    price: BigNumberish,
    change: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    symbol: string,
    price: bigint,
    change: bigint
  ];
  export interface OutputObject {
    id: bigint;
    symbol: string;
    price: bigint;
    change: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdateRejectedEvent {
  export type InputTuple = [
    symbolHash: BytesLike,
    price: BigNumberish,
    impact: BigNumberish
  ];
  export type OutputTuple = [symbolHash: string, price: bigint, impact: bigint];
  export interface OutputObject {
    symbolHash: string;
    price: bigint;
    impact: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebaseEvent {
  export type InputTuple = [
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    priceDelta: BigNumberish
  ];
  export type OutputTuple = [
    oldPrice: bigint,
    newPrice: bigint,
    priceDelta: bigint
  ];
  export interface OutputObject {
    oldPrice: bigint;
    newPrice: bigint;
    priceDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SymbolAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    symbol: string,
    priceFeed: AddressLike
  ];
  export type OutputTuple = [id: bigint, symbol: string, priceFeed: string];
  export interface OutputObject {
    id: bigint;
    symbol: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SymbolDeactivatedEvent {
  export type InputTuple = [id: BigNumberish, symbol: string];
  export type OutputTuple = [id: bigint, symbol: string];
  export interface OutputObject {
    id: bigint;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaxCollectedEvent {
  export type InputTuple = [amount: BigNumberish, isBuyTax: boolean];
  export type OutputTuple = [amount: bigint, isBuyTax: boolean];
  export interface OutputObject {
    amount: bigint;
    isBuyTax: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [symbol: string, timestamp: BigNumberish];
  export type OutputTuple = [symbol: string, timestamp: bigint];
  export interface OutputObject {
    symbol: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VirtualPairCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    symbol: string,
    priceFeed: AddressLike,
    targetPrice: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    symbol: string,
    priceFeed: string,
    targetPrice: bigint
  ];
  export interface OutputObject {
    id: bigint;
    symbol: string;
    priceFeed: string;
    targetPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalInitiatedEvent {
  export type InputTuple = [withdrawalId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [withdrawalId: bigint, amount: bigint];
  export interface OutputObject {
    withdrawalId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElasticToken extends BaseContract {
  connect(runner?: ContractRunner | null): ElasticToken;
  waitForDeployment(): Promise<this>;

  interface: ElasticTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCKS_BETWEEN_TRADES: TypedContractMethod<[], [bigint], "view">;

  BUY_TAX: TypedContractMethod<[], [bigint], "view">;

  CURVE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAX_OPERATORS: TypedContractMethod<[], [bigint], "view">;

  MAX_PRICE_IMPACT: TypedContractMethod<[], [bigint], "view">;

  MAX_RESERVE_RATIO: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MIN_PRICE_ANSWERS: TypedContractMethod<[], [bigint], "view">;

  MIN_PRICE_CHANGE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  MIN_PRICE_UPDATE_TIME: TypedContractMethod<[], [bigint], "view">;

  MIN_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  PRICE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  PRICE_FRESHNESS_PERIOD: TypedContractMethod<[], [bigint], "view">;

  SELL_TAX: TypedContractMethod<[], [bigint], "view">;

  TAX_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  TRACKED_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  WEBSITE: TypedContractMethod<[], [string], "view">;

  WITHDRAWAL_DELAY: TypedContractMethod<[], [bigint], "view">;

  addOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  addSymbol: TypedContractMethod<
    [priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [symbolHash: BytesLike, _spender: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  burnCurveRate: TypedContractMethod<[], [bigint], "view">;

  buyTokensByIndex: TypedContractMethod<
    [symbolId: BigNumberish, minTokensOut_: BigNumberish],
    [bigint],
    "payable"
  >;

  closeLongPosition: TypedContractMethod<[], [void], "nonpayable">;

  collectedTaxes: TypedContractMethod<[], [bigint], "view">;

  completeWithdrawal: TypedContractMethod<
    [withdrawalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deactivateSymbol: TypedContractMethod<
    [symbol_: string],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  emergencyShutdown: TypedContractMethod<[], [void], "nonpayable">;

  getPositionInfo: TypedContractMethod<
    [staker: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        symbol_: string;
        ethAmount: bigint;
        entryPrice: bigint;
        timestamp: bigint;
        currentPnL: bigint;
      }
    ],
    "view"
  >;

  getSupportedSymbolsCount: TypedContractMethod<[], [bigint], "view">;

  getSymbolHash: TypedContractMethod<[symbol_: string], [string], "view">;

  getSymbolInfo: TypedContractMethod<
    [symbol_: string],
    [
      [string, bigint, bigint, boolean] & {
        priceFeed: string;
        lastPrice: bigint;
        reserveBalance: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getSymbolPriceByIndex: TypedContractMethod<
    [symbolId: BigNumberish],
    [bigint],
    "view"
  >;

  getSymbolStats: TypedContractMethod<
    [symbolId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalSupply: bigint;
        holders: bigint;
        trades24h: bigint;
        price24hAgo: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;

  getSystemInfo: TypedContractMethod<[], [string], "view">;

  idBySymbol: TypedContractMethod<[arg0: string], [bigint], "view">;

  initiateWithdrawal: TypedContractMethod<[], [void], "nonpayable">;

  lastTradeBlock: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    "view"
  >;

  longPositions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        symbolHash: string;
        ethAmount: bigint;
        entryPrice: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  mintCurveRate: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextWithdrawalId: TypedContractMethod<[], [bigint], "view">;

  openLongPositionByIndex: TypedContractMethod<
    [symbolId: BigNumberish],
    [void],
    "payable"
  >;

  operatorCount: TypedContractMethod<[], [bigint], "view">;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  rebaseFactor: TypedContractMethod<[], [bigint], "view">;

  rebaseSupply: TypedContractMethod<[], [void], "nonpayable">;

  removeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  sellTokensByIndex: TypedContractMethod<
    [symbolId: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedSymbols: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  symbolById: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  symbolData: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        symbol: string;
        priceFeed: string;
        lastPrice: bigint;
        reserveBalance: bigint;
        active: boolean;
        lastRebase: bigint;
        targetPrice: bigint;
        totalTrades: bigint;
      }
    ],
    "view"
  >;

  symbolStats: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        totalSupply: bigint;
        holders: bigint;
        trades24h: bigint;
        price24hAgo: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalSupplyBySymbol: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  trackedSymbol: TypedContractMethod<[], [string], "view">;

  tradesPerHour: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transfer: TypedContractMethod<
    [symbolHash: BytesLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      symbolHash: BytesLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTaxes: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCKS_BETWEEN_TRADES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BUY_TAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CURVE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_OPERATORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRICE_IMPACT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_RESERVE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PRICE_ANSWERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PRICE_CHANGE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PRICE_UPDATE_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_FRESHNESS_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SELL_TAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAX_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRACKED_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WEBSITE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWAL_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSymbol"
  ): TypedContractMethod<[priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [symbolHash: BytesLike, _spender: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnCurveRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTokensByIndex"
  ): TypedContractMethod<
    [symbolId: BigNumberish, minTokensOut_: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "closeLongPosition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectedTaxes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeWithdrawal"
  ): TypedContractMethod<[withdrawalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateSymbol"
  ): TypedContractMethod<[symbol_: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyShutdown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPositionInfo"
  ): TypedContractMethod<
    [staker: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        symbol_: string;
        ethAmount: bigint;
        entryPrice: bigint;
        timestamp: bigint;
        currentPnL: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedSymbolsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSymbolHash"
  ): TypedContractMethod<[symbol_: string], [string], "view">;
  getFunction(
    nameOrSignature: "getSymbolInfo"
  ): TypedContractMethod<
    [symbol_: string],
    [
      [string, bigint, bigint, boolean] & {
        priceFeed: string;
        lastPrice: bigint;
        reserveBalance: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSymbolPriceByIndex"
  ): TypedContractMethod<[symbolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSymbolStats"
  ): TypedContractMethod<
    [symbolId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalSupply: bigint;
        holders: bigint;
        trades24h: bigint;
        price24hAgo: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSystemInfo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "idBySymbol"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "initiateWithdrawal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastTradeBlock"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "longPositions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        symbolHash: string;
        ethAmount: bigint;
        entryPrice: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintCurveRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextWithdrawalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openLongPositionByIndex"
  ): TypedContractMethod<[symbolId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "operatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rebaseFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rebaseSupply"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellTokensByIndex"
  ): TypedContractMethod<
    [symbolId: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedSymbols"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbolById"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "symbolData"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        symbol: string;
        priceFeed: string;
        lastPrice: bigint;
        reserveBalance: bigint;
        active: boolean;
        lastRebase: bigint;
        targetPrice: bigint;
        totalTrades: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbolStats"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        totalSupply: bigint;
        holders: bigint;
        trades24h: bigint;
        price24hAgo: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyBySymbol"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "trackedSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tradesPerHour"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [symbolHash: BytesLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      symbolHash: BytesLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTaxes"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyShutdown"
  ): TypedContractEvent<
    EmergencyShutdownEvent.InputTuple,
    EmergencyShutdownEvent.OutputTuple,
    EmergencyShutdownEvent.OutputObject
  >;
  getEvent(
    key: "HolderAdded"
  ): TypedContractEvent<
    HolderAddedEvent.InputTuple,
    HolderAddedEvent.OutputTuple,
    HolderAddedEvent.OutputObject
  >;
  getEvent(
    key: "HolderRemoved"
  ): TypedContractEvent<
    HolderRemovedEvent.InputTuple,
    HolderRemovedEvent.OutputTuple,
    HolderRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LongPositionClosed"
  ): TypedContractEvent<
    LongPositionClosedEvent.InputTuple,
    LongPositionClosedEvent.OutputTuple,
    LongPositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "LongPositionOpened"
  ): TypedContractEvent<
    LongPositionOpenedEvent.InputTuple,
    LongPositionOpenedEvent.OutputTuple,
    LongPositionOpenedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorAdded"
  ): TypedContractEvent<
    OperatorAddedEvent.InputTuple,
    OperatorAddedEvent.OutputTuple,
    OperatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRemoved"
  ): TypedContractEvent<
    OperatorRemovedEvent.InputTuple,
    OperatorRemovedEvent.OutputTuple,
    OperatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PriceTracked"
  ): TypedContractEvent<
    PriceTrackedEvent.InputTuple,
    PriceTrackedEvent.OutputTuple,
    PriceTrackedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdateRejected"
  ): TypedContractEvent<
    PriceUpdateRejectedEvent.InputTuple,
    PriceUpdateRejectedEvent.OutputTuple,
    PriceUpdateRejectedEvent.OutputObject
  >;
  getEvent(
    key: "Rebase"
  ): TypedContractEvent<
    RebaseEvent.InputTuple,
    RebaseEvent.OutputTuple,
    RebaseEvent.OutputObject
  >;
  getEvent(
    key: "SymbolAdded"
  ): TypedContractEvent<
    SymbolAddedEvent.InputTuple,
    SymbolAddedEvent.OutputTuple,
    SymbolAddedEvent.OutputObject
  >;
  getEvent(
    key: "SymbolDeactivated"
  ): TypedContractEvent<
    SymbolDeactivatedEvent.InputTuple,
    SymbolDeactivatedEvent.OutputTuple,
    SymbolDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "TaxCollected"
  ): TypedContractEvent<
    TaxCollectedEvent.InputTuple,
    TaxCollectedEvent.OutputTuple,
    TaxCollectedEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VirtualPairCreated"
  ): TypedContractEvent<
    VirtualPairCreatedEvent.InputTuple,
    VirtualPairCreatedEvent.OutputTuple,
    VirtualPairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalInitiated"
  ): TypedContractEvent<
    WithdrawalInitiatedEvent.InputTuple,
    WithdrawalInitiatedEvent.OutputTuple,
    WithdrawalInitiatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "EmergencyShutdown(address)": TypedContractEvent<
      EmergencyShutdownEvent.InputTuple,
      EmergencyShutdownEvent.OutputTuple,
      EmergencyShutdownEvent.OutputObject
    >;
    EmergencyShutdown: TypedContractEvent<
      EmergencyShutdownEvent.InputTuple,
      EmergencyShutdownEvent.OutputTuple,
      EmergencyShutdownEvent.OutputObject
    >;

    "HolderAdded(string,address)": TypedContractEvent<
      HolderAddedEvent.InputTuple,
      HolderAddedEvent.OutputTuple,
      HolderAddedEvent.OutputObject
    >;
    HolderAdded: TypedContractEvent<
      HolderAddedEvent.InputTuple,
      HolderAddedEvent.OutputTuple,
      HolderAddedEvent.OutputObject
    >;

    "HolderRemoved(string,address)": TypedContractEvent<
      HolderRemovedEvent.InputTuple,
      HolderRemovedEvent.OutputTuple,
      HolderRemovedEvent.OutputObject
    >;
    HolderRemoved: TypedContractEvent<
      HolderRemovedEvent.InputTuple,
      HolderRemovedEvent.OutputTuple,
      HolderRemovedEvent.OutputObject
    >;

    "LongPositionClosed(address,uint256)": TypedContractEvent<
      LongPositionClosedEvent.InputTuple,
      LongPositionClosedEvent.OutputTuple,
      LongPositionClosedEvent.OutputObject
    >;
    LongPositionClosed: TypedContractEvent<
      LongPositionClosedEvent.InputTuple,
      LongPositionClosedEvent.OutputTuple,
      LongPositionClosedEvent.OutputObject
    >;

    "LongPositionOpened(address,uint256,int256)": TypedContractEvent<
      LongPositionOpenedEvent.InputTuple,
      LongPositionOpenedEvent.OutputTuple,
      LongPositionOpenedEvent.OutputObject
    >;
    LongPositionOpened: TypedContractEvent<
      LongPositionOpenedEvent.InputTuple,
      LongPositionOpenedEvent.OutputTuple,
      LongPositionOpenedEvent.OutputObject
    >;

    "OperatorAdded(address)": TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;
    OperatorAdded: TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;

    "OperatorRemoved(address)": TypedContractEvent<
      OperatorRemovedEvent.InputTuple,
      OperatorRemovedEvent.OutputTuple,
      OperatorRemovedEvent.OutputObject
    >;
    OperatorRemoved: TypedContractEvent<
      OperatorRemovedEvent.InputTuple,
      OperatorRemovedEvent.OutputTuple,
      OperatorRemovedEvent.OutputObject
    >;

    "PriceTracked(uint256,string,int256,int256)": TypedContractEvent<
      PriceTrackedEvent.InputTuple,
      PriceTrackedEvent.OutputTuple,
      PriceTrackedEvent.OutputObject
    >;
    PriceTracked: TypedContractEvent<
      PriceTrackedEvent.InputTuple,
      PriceTrackedEvent.OutputTuple,
      PriceTrackedEvent.OutputObject
    >;

    "PriceUpdateRejected(bytes32,int256,uint256)": TypedContractEvent<
      PriceUpdateRejectedEvent.InputTuple,
      PriceUpdateRejectedEvent.OutputTuple,
      PriceUpdateRejectedEvent.OutputObject
    >;
    PriceUpdateRejected: TypedContractEvent<
      PriceUpdateRejectedEvent.InputTuple,
      PriceUpdateRejectedEvent.OutputTuple,
      PriceUpdateRejectedEvent.OutputObject
    >;

    "Rebase(int256,int256,int256)": TypedContractEvent<
      RebaseEvent.InputTuple,
      RebaseEvent.OutputTuple,
      RebaseEvent.OutputObject
    >;
    Rebase: TypedContractEvent<
      RebaseEvent.InputTuple,
      RebaseEvent.OutputTuple,
      RebaseEvent.OutputObject
    >;

    "SymbolAdded(uint256,string,address)": TypedContractEvent<
      SymbolAddedEvent.InputTuple,
      SymbolAddedEvent.OutputTuple,
      SymbolAddedEvent.OutputObject
    >;
    SymbolAdded: TypedContractEvent<
      SymbolAddedEvent.InputTuple,
      SymbolAddedEvent.OutputTuple,
      SymbolAddedEvent.OutputObject
    >;

    "SymbolDeactivated(uint256,string)": TypedContractEvent<
      SymbolDeactivatedEvent.InputTuple,
      SymbolDeactivatedEvent.OutputTuple,
      SymbolDeactivatedEvent.OutputObject
    >;
    SymbolDeactivated: TypedContractEvent<
      SymbolDeactivatedEvent.InputTuple,
      SymbolDeactivatedEvent.OutputTuple,
      SymbolDeactivatedEvent.OutputObject
    >;

    "TaxCollected(uint256,bool)": TypedContractEvent<
      TaxCollectedEvent.InputTuple,
      TaxCollectedEvent.OutputTuple,
      TaxCollectedEvent.OutputObject
    >;
    TaxCollected: TypedContractEvent<
      TaxCollectedEvent.InputTuple,
      TaxCollectedEvent.OutputTuple,
      TaxCollectedEvent.OutputObject
    >;

    "TradeExecuted(string,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VirtualPairCreated(uint256,string,address,uint256)": TypedContractEvent<
      VirtualPairCreatedEvent.InputTuple,
      VirtualPairCreatedEvent.OutputTuple,
      VirtualPairCreatedEvent.OutputObject
    >;
    VirtualPairCreated: TypedContractEvent<
      VirtualPairCreatedEvent.InputTuple,
      VirtualPairCreatedEvent.OutputTuple,
      VirtualPairCreatedEvent.OutputObject
    >;

    "WithdrawalInitiated(uint256,uint256)": TypedContractEvent<
      WithdrawalInitiatedEvent.InputTuple,
      WithdrawalInitiatedEvent.OutputTuple,
      WithdrawalInitiatedEvent.OutputObject
    >;
    WithdrawalInitiated: TypedContractEvent<
      WithdrawalInitiatedEvent.InputTuple,
      WithdrawalInitiatedEvent.OutputTuple,
      WithdrawalInitiatedEvent.OutputObject
    >;
  };
}
